import{a}from"./chunk-EI7MMDWY.js";function m(t){if(typeof t!="string")throw new TypeError(`Expected header to be a string, but received ${typeof t}`);return Object.fromEntries(t.split("; ").filter(Boolean).map(o=>{let e=o.indexOf("="),n=decodeURIComponent(o.substring(0,e)),r=decodeURIComponent(o.substring(e+1));return[n,r]}))}a(m,"getCookies");var p=null;async function u(t){if(!p){let o=await t.COOKIES_ENC_KEY.get(),e=Uint8Array.from(atob(o),n=>n.charCodeAt(0));if(e.length!==32)throw new Error(`Invalid key length ${e.length*8} bits \u2014 required 256 bits`);p=crypto.subtle.importKey("raw",e,{name:"AES-GCM"},!1,["encrypt","decrypt"])}return p}a(u,"getCryptoKey");async function g(t,o){if(!t)return null;let e=await u(o),[n,r]=t.split(":"),i=Uint8Array.from(atob(n),c=>c.charCodeAt(0)),s=Uint8Array.from(atob(r),c=>c.charCodeAt(0)),y=await crypto.subtle.decrypt({name:"AES-GCM",iv:i},e,s);return new TextDecoder().decode(y)}a(g,"getDecryptedCookie");async function C(t,o,e,n){let r=await u(e),i=crypto.getRandomValues(new Uint8Array(12)),s=await crypto.subtle.encrypt({name:"AES-GCM",iv:i},r,new TextEncoder().encode(o)),y=btoa(String.fromCharCode(...i)),c=btoa(String.fromCharCode(...new Uint8Array(s))),f=`${y}:${c}`,d=`${t}=${f}; HttpOnly; Secure; SameSite=Lax; Path=/;`;return typeof n=="number"&&n>0&&(d+=` Max-Age=${n};`),d}a(C,"getEncryptedCookie");export{m as a,g as b,C as c};
